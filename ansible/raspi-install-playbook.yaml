

- name: Install minimal requirements for Ansible and disable root password asking
  hosts: alykoti_server
  become: true
  gather_facts: no
  tasks:
    - name: Allow sudo without password asking (to make things easier for Ansible)..
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%sudo'
        line: '%sudo ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'
    - name: Install some useful stuff
      raw: apt-get -y install python python3 python3-pip python3-setuptools acl unzip postgresql-client

- name: Set timezone and configure unattended upgrades (and update/upgrade system)
  hosts: alykoti_server
  become: true
  vars_files:
    - vars/main.yaml
  roles:
    - jnv.unattended-upgrades
  tasks:
    - name: Set timezone
      community.general.timezone:
        name: "{{ timezone }}"
    - name: update and upgrade
      apt:
        upgrade: safe
        update_cache: yes
        cache_valid_time: 3600
    - name: Reboot
      shell: nohup bash -c "/bin/sleep 5 && /sbin/shutdown -r now" &
      become: true
    - name: Wait 
      wait_for_connection: timeout=300 delay=30

- name: Install smarthome-related stuff which is running locally on host
  hosts: alykoti_server
  become: true
  vars_files:
    - vars/main.yaml
  vars:
    pip_package: python3-pip
    pip_install_packages:
      - name: docker
      - name: docker-compose
    docker_users:
      - "{{ ansible_ssh_user }}"
    docker_install_compose: true
    docker_install_recommends: true

  roles:
    - role: smarthome-borgbackup
    - { role: install-edgetpu, 
      when: frigate.edgetpu=='pci' }
    - geerlingguy.pip
    - geerlingguy.docker
    # this role installs m3nu.ansible_role_borgbackup but also inits backup etc


  tasks:
    - name: Create datadir
      file:
        path: "{{ data_dir }}"
        state: directory
        owner: "{{ ansible_ssh_user }}"
        group: docker
        mode: ug+rw,g+s

- name: Install containers
  hosts: alykoti_server
  become: true
  vars_files:
    - vars/main.yaml
  roles:
    - docker-compose-traefik
    - docker-compose-frigate
    - docker-compose-mosquitto
    - docker-compose-postgres
    - docker-compose-zigbee2mqtt
    - docker-compose-home-assistant
#    - docker-compose-bt-mqtt-gateway
    - docker-compose-code-server
    - docker-compose-portainer
    - docker-compose-pi-hole

  tasks:
#Homebridge begin
    - name: Create homebridge dir
      when: components.homebridge
      file:
        path: "{{ data_dir }}/homebridge"
        state: directory
        owner: "{{ ansible_ssh_user }}"
        group: docker
        mode: ug=rwx,g=rwx,o=rx
    - name: Remove homebridge container if that exists
      when: components.homebridge
      community.general.docker_container:
        name: homebridge
        state: absent
    - name: Create homebridge container
      when: components.homebridge
      community.general.docker_container:
        name: homebridge
        image: oznu/homebridge
        restart_policy: unless-stopped
        container_default_behavior: no_defaults
        # Define behavior
        network_mode: host
        auto_remove: no
        detach: yes
        interactive: no
        paused: no
        privileged: yes
        read_only: no
        tty: no
        memory: "0"
        init: no
        env:
          HOMEBRIDGE_CONFIG_UI: "{{ timezone }}"
          HOMEBRIDGE_CONFIG_UI_PORT: "8081"
          PUID: "0"
          PGID: "0"
        volumes:
          - "{{ data_dir }}/homebridge/:/homebridge" 
#Homebridge end

#Node-RED begin
    - name: Create nodered dir
      when: components.nodered
      file:
        path: "{{ data_dir }}/nodered"
        state: directory
        owner: "{{ ansible_ssh_user }}"
        group: docker
        mode: ug=rwx,g=rwx,o=rx
    - name: Remove nodered container if that exists
      when: components.nodered
      community.general.docker_container:
        name: nodered
        state: absent
    - name: Create nodered container
      when: components.nodered
      community.general.docker_container:
        name: nodered
        image: nodered/node-red
        restart_policy: unless-stopped
        container_default_behavior: no_defaults
        # Define behavior
        network_mode: bridge
        auto_remove: no
        detach: yes
        interactive: no
        paused: no
        privileged: yes
        read_only: no
        tty: no
        memory: "0"
        init: no
        ports:
          - "1880:1880"
        volumes:
          - "{{ data_dir }}/nodered/:/data"
#Node-RED end

- name: Final reboot
  hosts: alykoti_server
  become: true
  tasks:
    - name: Initial backup
      raw: borgmatic -c /etc/borgmatic/config.yaml --create --prune
    - name: Reboot
      shell: nohup bash -c "/bin/sleep 5 && /sbin/shutdown -r now" &
      become: true
    - name: Wait 
      wait_for_connection: timeout=300 delay=30
